// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


// Enum 정의
enum MissionStatus {
  IN_PROGRESS
  COMPLETED
}

enum UserMissionStatus {
  IN_PROGRESS
  COMPLETED
}

// 지역 모델
model regions {
  id          Int           @id @default(autoincrement())
  region_name String        @unique @db.VarChar(100)

  stores      stores[]
  missions    missions[]

  @@map("regions")
}

// 사용자 모델
model users {
  id                Int                 @id @default(autoincrement())
  user_name         String              @unique @db.VarChar(50)
  password          String              @db.VarChar(255)
  email             String              @unique @db.VarChar(100)
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  gender            String              @db.VarChar(15)
  birth             DateTime?           @db.Date
  address           String              @db.VarChar(255)
  detailAddress     String?             @map("detail_address") @db.VarChar(255)
  phoneNumber       String              @map("phone_number") @db.VarChar(20)

  reviews           reviews[]
  user_points       user_points[]
  user_missions     user_missions[]
  user_favor_category user_favor_category[]

  @@map("users")
}

// 리뷰 모델
model reviews {
  id          Int       @id @default(autoincrement())
  user        users     @relation(fields: [userId], references: [id])
  userId      Int       @map("user_id")
  store       stores    @relation(fields: [storeId], references: [id])
  storeId     Int       @map("store_id")
  rating      Int       @db.Int
  review_text String?   @db.Text
  created_at  DateTime  @default(now()) @db.Timestamp(6)

  @@map("reviews")
}

model missions {
  id             Int               @id @default(autoincrement())
  description    String            @db.Text
  mission_status MissionStatus
  created_at     DateTime          @default(now()) @db.Timestamp(6)
  region         regions?          @relation(fields: [regionId], references: [id])
  regionId       Int?              @map("region_id")
  store          stores?           @relation(fields: [storeId], references: [id]) // stores와 관계 설정
  storeId        Int?              @map("store_id")                               // stores의 외래 키

  user_missions  user_missions[]

  @@map("missions")
}

// stores 모델
model stores {
  id            Int              @id @default(autoincrement())
  store_name    String           @db.VarChar(100)
  region        regions?         @relation(fields: [regionId], references: [id])
  regionId      Int?             @map("region_id")
  store_address String?          @db.VarChar(255)

  reviews       reviews[]
  user_missions user_missions[]
  missions      missions[]       

  @@map("stores")
}

// 사용자 포인트 모델
model user_points {
  id          Int           @id @default(autoincrement())
  user        users         @relation(fields: [userId], references: [id])
  userId      Int           @map("user_id")
  points      Int           @default(0)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)

  user_missions user_missions[]

  @@map("user_points")
}

// 사용자 미션 모델
model user_missions {
  id             Int             @id @default(autoincrement())
  user           users           @relation(fields: [userId], references: [id])
  userId         Int             @map("user_id")
  mission        missions        @relation(fields: [missionId], references: [id])
  missionId      Int             @map("mission_id")
  store          stores          @relation(fields: [storeId], references: [id])
  storeId        Int             @map("store_id")
  point          user_points     @relation(fields: [pointId], references: [id])
  pointId        Int             @map("point_id")
  status         UserMissionStatus
  completed_at   DateTime?

  @@map("user_missions")
}

// 음식 카테고리 모델
model food_category {
  id                Int                   @id @default(autoincrement())
  name              String                @unique @db.VarChar(100)

  user_favor_category user_favor_category[]

  @@map("food_category")
}

// 사용자 선호 카테고리 모델
model user_favor_category {
  id             Int           @id @default(autoincrement())
  user           users         @relation(fields: [userId], references: [id])
  userId         Int           @map("user_id")
  foodCategory   food_category @relation(fields: [foodCategoryId], references: [id])
  foodCategoryId Int           @map("food_category_id")

  @@index([foodCategoryId], map: "f_category_id")
  @@index([userId], map: "user_id_idx")
  @@map("user_favor_category")
}
